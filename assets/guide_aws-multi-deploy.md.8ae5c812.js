import{_ as s,c as a,d as l,w as e,a as n,e as o,b as t,r as c,o as p}from"./app.7bd26314.js";const r='{"title":"AWS 다중 서버 배포","description":"","frontmatter":{"head":[["meta",{"property":"og:description","content":"AWS 다중 서버 배포 하기"}],["meta",{"property":"twitter:description","content":"AWS 다중 서버 배포 하기"}]]},"headers":[{"level":2,"title":"AWS VPC","slug":"aws-vpc"},{"level":2,"title":"AWS CLI","slug":"aws-cli"},{"level":2,"title":"프라이빗 서브넷 만들기","slug":"프라이빗-서브넷-만들기"},{"level":2,"title":"EC2 여러개 만들기","slug":"ec2-여러개-만들기"},{"level":2,"title":"Elastic Load Balancer 만들기","slug":"elastic-load-balancer-만들기"},{"level":2,"title":"마무리","slug":"마무리"}],"relativePath":"guide/aws-multi-deploy.md"}',i={},d=o('<h1 id="aws-다중-서버-배포" tabindex="-1">AWS 다중 서버 배포 <a class="header-anchor" href="#aws-다중-서버-배포" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">⚡️ 목표</p><p>✅ AWS VPC에 대해 알아봅니다.<br> ✅ AWS CLI 사용법을 알아봅니다.<br> ✅ 프라이빗 서브넷을 생성합니다.<br> ✅ ALB를 생성합니다.</p></div><p><div class="table-of-contents"><ul><li><a href="#aws-vpc">AWS VPC</a></li><li><a href="#aws-cli">AWS CLI</a></li><li><a href="#프라이빗-서브넷-만들기">프라이빗 서브넷 만들기</a></li><li><a href="#ec2-여러개-만들기">EC2 여러개 만들기</a></li><li><a href="#elastic-load-balancer-만들기">Elastic Load Balancer 만들기</a></li><li><a href="#마무리">마무리</a></li></ul></div></p><p><code>Awesome API</code> 서비스는 점점 인기가 많아졌고 더 이상 <code>t2.micro</code> 한 대로 버티긴 어려울 것 같습니다. CPU 성능을 높이는 스케일 업<sup>Scale Up</sup> 방식도 생각했지만, 부하에 따라 서버의 개수를 유연하게 조정할 수 있는 스케일 아웃<sup>Scale Out</sup> 방식으로 결정했습니다.</p>',4),u=o('<h2 id="aws-vpc" tabindex="-1">AWS VPC <a class="header-anchor" href="#aws-vpc" aria-hidden="true">#</a></h2><p>VPC(Virtual Private Cloud)는 AWS에서 제공하는 강력한 <s>복잡한</s> 가상 네트워크 환경입니다.</p><p>서울(ap-northeast-2), 도쿄(ap-northeast-1), N. Virginia(us-east-1)등 각 지역<sup>region</sup>마다 VPC가 있고 서울은 4개의 가용영역<sup>Availability Zone</sup>(A,B,C,D)이 있습니다. 처음 AWS 계정을 생성하면 <a href="https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/default-vpc.html" target="_blank" rel="noopener noreferrer">가용영역별로 하나씩 퍼블릭 서브넷</a>을 만들어 주는데, 원하는 만큼 서브넷을 추가할 수 있고 프라이빗 서브넷을 추가하여 보안을 강화할 수 있습니다.</p><p>그냥 적당히 설정하고 쓰면 안 될까 싶지만, 인터넷에서 바로 접근할 수 있는 퍼블릭 서브넷에 서버를 배치하는 건 위험하고, 비좁은 서브넷에 서버를 배치하다 보면 나중에 IP가 부족할 수도 있습니다. <s>EKS 맛좀 보면..</s> 추후 VPC간 연결이나 VPN 사용을 고려하여 네트워크 대역을 변경할 필요도 있습니다.</p><p>일단 기본 설정을 유지하고 프라이빗 서브넷을 추가합니다. 서울 리전(ap-northeast-2) 가용영역 중 A와 C에 <code>172.31.112.0/20</code>, <code>172.31.144.0/20</code> 영역으로 생성하겠습니다.</p>',5),A={class:"image-500"},g=o('<div class="tip custom-block"><p class="custom-block-title">CIDR(Classless Inter-Domain Routing)</p><p><a href="https://ko.wikipedia.org/wiki/%EC%82%AC%EC%9D%B4%EB%8D%94_(%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%82%B9)" target="_blank" rel="noopener noreferrer">CIDR(사이더)</a>는 IP 주소를 할당하고 패킷을 라우팅하는 방식 중 하나입니다. 서버는 IP 주소(<a href="http://xxx.xxx.xxx.xxx" target="_blank" rel="noopener noreferrer">xxx.xxx.xxx.xxx</a>)로 통신을 하는데 하나하나 경로를 지정하면 복잡하기 때문에 앞에 주소를 고정하고 뒤에 주소만 다르게 하여 블록 단위로 경로를 관리합니다.<br> CIDR 블록은 <code>xxx.xxx.xxx.xxx(아이피)/xx(고정 비트 수)</code>와 같이 표기하며 영역이 서로 겹치지 않게 잘 관리해야 합니다.</p></div><div class="tip custom-block"><p class="custom-block-title">AWS VPC 더보기</p><p>📔 <a href="https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/what-is-amazon-vpc.html" target="_blank" rel="noopener noreferrer">Amazon VPC란 무엇인가?</a></p></div><h2 id="aws-cli" tabindex="-1">AWS CLI <a class="header-anchor" href="#aws-cli" aria-hidden="true">#</a></h2><p>서브넷은 AWS 관리자 화면에서 클릭클릭으로 만들 수 있지만, 이번엔 AWS CLI<sup>Command Line Interface</sup>를 이용합니다. AWS는 <s>거의</s> 모든 걸 CLI로 빠르고 간편하게 만들 수 있습니다.</p><ol><li>Access Key를 만들기 위해 Security Credentials 메뉴를 선택합니다.</li></ol>',5),C={class:"image-250"},D=n("ol",{start:"2"},[n("li",null,[t("Access Keys 항목에서 "),n("code",null,"Create New Access Key"),t("를 누릅니다.")])],-1),y={class:"image-800"},m=n("ol",{start:"3"},[n("li",null,"Access Key ID와 Secret Access Key를 확인할 수 있습니다.")],-1),b={class:"image-550"},v=o('<div class="warning custom-block"><p class="custom-block-title">주의!!</p><p>Access Key ID와 Secret Access Key는 <strong>무지무지무지 중요한 정보</strong>입니다. 이 키만 있으면 AWS의 모든 리소스를 만들 수 있기 때문에 혹시나 유출되면 순식간에 채굴 서버가 생성되는 무시무시한 경험을 할 수 있습니다. 수백, 수천만원이 청구되길 원치 않는다면 키를 반드시 안전하게 보관하고 실습이 끝나고 필요하지 않은 키는 삭제하는 것이 좋습니다.</p></div><p><a href="https://docs.aws.amazon.com/ko_kr/cli/latest/userguide/getting-started-install.html" target="_blank" rel="noopener noreferrer">awscli를 설치하고</a> Access Key를 설정합니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;">aws configure</span></span>\n<span class="line"></span></code></pre></div><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;">AWS Access Key ID </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">None</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">: AKIA61234567890ABCDE</span></span>\n<span class="line"><span style="color:#A6ACCD;">AWS Secret Access Key </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">None</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">: thisissecretdonotusethis</span></span>\n<span class="line"><span style="color:#A6ACCD;">Default region name </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">None</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">: ap-northeast-2</span></span>\n<span class="line"><span style="color:#A6ACCD;">Default output format </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">None</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">:</span></span>\n<span class="line"></span></code></pre></div><p>설정을 완료하고 계정 정보를 확인합니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;">aws sts get-caller-identity</span></span>\n<span class="line"></span></code></pre></div><div class="language-json"><pre><code><span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">UserId</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">AIDAI1234567890ABCDEF</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">Account</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1234567890AB</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">Arn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">arn:aws:iam::1234567890AB:user/subicura</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>준비가 완료되었으니, 한 땀 한 땀 리소스를 생성하고 연결해 보겠습니다.</p><div class="tip custom-block"><p class="custom-block-title">cli_pager 옵션</p><p>AWS CLI의 실행 결과를 화면에 그대로 출력하려면 다음 명령어를 입력합니다.<br><code>aws configure set cli_pager &quot;&quot;</code></p></div><div class="tip custom-block"><p class="custom-block-title">AWS CLI 더보기</p><p>📔 <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html" target="_blank" rel="noopener noreferrer">AWS CLI 소개</a><br> 📝 <a href="https://github.com/99designs/aws-vault" target="_blank" rel="noopener noreferrer">AWS Vault</a></p></div><h2 id="프라이빗-서브넷-만들기" tabindex="-1">프라이빗 서브넷 만들기 <a class="header-anchor" href="#프라이빗-서브넷-만들기" aria-hidden="true">#</a></h2>',11),h={class:"image-550"},_=o('<p>프라이빗 서브넷을 만들기 위해선 다음 리소스가 필요합니다.</p><ul><li>서브넷</li><li>NAT 게이트웨이 (+ 공인 IP / Elastic IP)</li><li>라우팅 테이블</li></ul><ol><li>A 가용영역에 서브넷을 생성합니다.<br> 서브넷이 퍼블릭 서브넷인지 프라이빗 서브넷인지는 연결된 라우팅 테이블에 따라 결정됩니다. 라우팅 테이블에 설정된 경로가 인터넷 게이트웨이를 바라보면 퍼블릭 서브넷, 그렇지 않으면 프라이빗 서브넷입니다.<br> 기본 라우팅 테이블은 인터넷 게이트웨이를 바라보므로 새로 만들어야 합니다.</li></ol><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;">aws ec2 create-subnet --vpc-id </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">vpc-id</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> --cidr-block 172.31.112.0/20 --availability-zone=ap-northeast-2a</span></span>\n<span class="line"></span></code></pre></div><blockquote><ul><li><code>vpc-id</code>: 서브넷을 생성할 VPC ID를 입력합니다. VPC 메뉴에서 확인하거나 <code>aws ec2 describe-vpcs --query &#39;Vpcs[*].VpcId&#39;</code> 명령어를 이용합니다.</li><li><code>availability-zone</code>: 가용영역을 입력합니다. 서울 지역의 A 가용영역인 <code>ap-northeast-2a</code>를 입력합니다.</li></ul></blockquote><ol start="2"><li>NAT 게이트웨이에 할당할 공인 IP를 생성합니다.</li></ol><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;">aws ec2 allocate-address --domain vpc</span></span>\n<span class="line"></span></code></pre></div><ol start="3"><li>프라이빗 서브넷이 인터넷에 연결할 수 있도록 NAT 게이트웨이를 생성합니다.</li></ol><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;">aws ec2 create-nat-gateway --subnet-id </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">public-subnet-id</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> --allocation-id </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">elastic-ip-address-id</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><blockquote><ul><li><code>subnet-id</code>: NAT 게이트웨이가 위치할 서브넷 ID를 입력합니다. A 가용영역에 있는 Public Subnet ID를 선택합니다. VPC &gt; Subnets 메뉴에서 확인하거나 <code>aws ec2 describe-subnets --query &#39;Subnets[*].[SubnetId, AvailabilityZone, CidrBlock]&#39;</code> 명령어를 이용합니다.</li><li><code>allocation-id</code>: 위에서 생성한 Elastic IP 정보를 입력합니다.</li></ul></blockquote><ol start="4"><li>프라이빗 서브넷에 연결할 라우팅 테이블을 만듭니다.</li></ol><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;">aws ec2 create-route-table --vpc-id </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">vpc-id</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><ol start="5"><li>생성한 라우팅 테이블에 경로를 추가합니다.</li></ol><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;">aws ec2 create-route --route-table-id </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">route-table-id</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> --destination-cidr-block 0.0.0.0/0 --gateway-id </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">nat-gateway-id</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><blockquote><ul><li><code>route-table-id</code>: 위에서 생성한 라우팅 테이블 ID를 입력합니다.</li><li><code>destination-cidr-block</code>: 내부망을 제외한 모든 요청을 NAT 게이트웨이로 보내기 위해 &#39;0.0.0.0/0&#39;을 입력합니다.</li><li><code>gateway-id</code>: 위에서 생성한 NAT 게이트웨이 ID를 입력합니다.</li></ul></blockquote><ol start="6"><li>완성된 라우팅 테이블을 서브넷에 연결합니다.</li></ol><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;">aws ec2 associate-route-table --route-table-id </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">route-table-id</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> --subnet-id </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">private-subnet-id</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><blockquote><ul><li><code>route-table-id</code>: 위에서 생성한 라우팅 테이블 ID를 입력합니다.</li><li><code>subnet-id</code>: 위에서 생성한 서브넷 ID를 입력합니다.</li></ul></blockquote><p>🎉 조금(?) 복잡했지만 프라이빗 서브넷을 생성했습니다! 위 내용을 참고하여 C 가용영역에 하나 더 만듭니다. <s>숙제</s></p><h2 id="ec2-여러개-만들기" tabindex="-1">EC2 여러개 만들기 <a class="header-anchor" href="#ec2-여러개-만들기" aria-hidden="true">#</a></h2><p>지난번에 배포했던 방식은 다음과 같습니다.</p>',21),F={class:"image-550"},w=n("p",null,"퍼블릭 서브넷에 EC2를 배치하고 바로 요청을 처리하는 방식입니다. 방화벽을 설정했지만, 왠지 불안한 구성입니다.",-1),S={class:"image-550"},T=n("p",null,"이번에 구성할 방식은 프라이빗 서브넷에 EC2 2대를 배치하고 Load Balancer를 통해 요청을 처리합니다. 프라이빗 서브넷에 배치해서 안전하고 Load Balancer를 통해 여러 대의 서버에 요청을 할 수 있습니다.",-1),f=n("p",null,[n("a",{href:"./aws-deploy.html#ec2-만들기"},"지난번"),t("에 만들었던 방법과 비슷하게 EC2를 2대 생성합니다. 차이점은 Subnet, Auto-assign public IP, Security Group 입니다.")],-1),I=n("p",null,[n("strong",null,"Subnet"),t(),n("code",null,"Private 영역 선택")],-1),k=n("ul",null,[n("li",null,"앞에서 생성한 프라이빗 서브넷을 선택합니다.")],-1),E={class:"image-600"},P=n("p",null,[n("strong",null,"Auto-assign public IP"),t(),n("code",null,"Disable")],-1),x=n("ul",null,[n("li",null,"외부에 노출하지 않는 서버이므로 공인 아이피를 할당하지 않습니다.")],-1),B={class:"image-600"},L=n("p",null,[n("strong",null,"Security Group"),t(),n("code",null,"3000 포트를 전체(0.0.0.0/0) 허용")],-1),V=n("ul",null,[n("li",null,"Load Balancer가 80 포트로 요청을 받으면 뒤에 있는 서버는 꼭 80 포트가 아니여도 괜찮습니다. 기존 애플리케이션 설정인 3000 포트를 사용합니다.")],-1),N={class:"image-650"},q=n("p",null,[n("strong",null,"Number of instances"),t(),n("code",null,"2")],-1),W=n("ul",null,[n("li",null,"동일한 설정으로 여러 대의 서버를 생성합니다.")],-1),M={class:"image-350"},K=n("p",null,[t("서버가 생성되면, "),n("a",{href:"./aws-deploy.html#node-js-배포"},"지난번과 동일"),t("하게 서버에 접속하여 애플리케이션을 배포합니다. 3000포트 그대로 서비스하므로 iptables 설정은 제외해도 됩니다.")],-1),G=n("h2",{id:"elastic-load-balancer-만들기",tabindex:"-1"},[t("Elastic Load Balancer 만들기 "),n("a",{class:"header-anchor",href:"#elastic-load-balancer-만들기","aria-hidden":"true"},"#")],-1),R=n("p",null,"로드 밸런서는 부하를 적절하게 분산해주는 장치입니다. 기본적인 동작 방식은 사용자가 로드 밸런서에 요청을 보내면 로드 밸런서가 여러대의 서버 중 한대에 요청을 전달하고, 서버가 응답한 결과를 다시 사용자에게 전달해줍니다.",-1),z=n("p",null,"Elastic Load Balancer는 Application Load Balancers, Network Load Balancers, Gateway Load Balancers, Classic Load Balancer 총 4가지 로드 밸런서를 제공하는데 여기선 ALB(Application Load Balancers)를 사용합니다. HTTP 통신을 할 때 가장 많이 사용하는 로드 밸런서입니다.",-1),O=n("p",null,"EC2 > Load Balancers 메뉴에서 새로운 로드 밸런서를 추가합니다.",-1),H=n("ol",null,[n("li",null,"여러 종류 중에 ALB를 선택합니다.")],-1),j={class:"image-700"},U=n("ol",{start:"2"},[n("li",null,"이름을 입력하고 Scheme와 IP address type은 기본값을 선택합니다. 내부망에서 사용하는 경우 Internal을 선택할 수 있습니다.")],-1),Z={class:"image-700"},J=n("ol",{start:"3"},[n("li",null,"로드 밸런서를 배치할 서브넷을 선택합니다. 로드 밸런서는 인터넷 요청을 받아야 하므로 퍼블릭 서브넷에 배치하고 안정성을 위해 2개 이상의 가용 영역을 선택합니다.")],-1),Q={class:"image-700"},X=n("ol",{start:"4"},[n("li",null,"HTTP(80)를 허용하는 Security Group을 만듭니다.")],-1),Y={class:"image-700"},$=n("ol",{start:"5"},[n("li",null,"로드 밸런서 HTTP(80) 요청을 전달할 Target Group을 생성합니다. 대부분 기본 설정을 그대로 사용하고 Port를 80에서 3000으로 변경합니다.")],-1),ss={class:"image-250"},as=n("blockquote",null,[n("p",null,[t("대상 인스턴스는 이전에 만든 EC2를 선택하고 "),n("code",null,"Include as pending below"),t("를 선택합니다.")])],-1),ls={class:"image-700"},es=n("ol",{start:"6"},[n("li",null,"생성한 Target Group을 선택합니다.")],-1),ns={class:"image-700"},os=o('<p>최종적으로 ALB가 생성되면, DNS name으로 접근하여 테스트합니다.</p><p>🎉성공! 정상적으로 응답을 확인했습니다. 이제 서버 한 대에 문제가 생겨도 서비스는 정상 작동하고 부하가 생겨도 손쉽게 확장할 수 있습니다.</p><div class="tip custom-block"><p class="custom-block-title">Elastic Load Balancing 더보기</p><p>📔 <a href="https://aws.amazon.com/ko/elasticloadbalancing/" target="_blank" rel="noopener noreferrer">Elastic Load Balancing 소개</a><br> 📔 <a href="https://docs.aws.amazon.com/ko_kr/elasticloadbalancing/latest/application/introduction.html" target="_blank" rel="noopener noreferrer">Application Load Balancer 알아보기</a></p></div><h2 id="마무리" tabindex="-1">마무리 <a class="header-anchor" href="#마무리" aria-hidden="true">#</a></h2><p>가장 일반적인 배포 방식을 알아보았습니다. 서비스마다 세부적인 차이는 있지만, 큰 틀은 동일하다고 보시면 됩니다.</p><p>Elastic Beanstalk도 EC2를 만들고, Target Group에 등록하고 ELB를 연결하는 동일한 방식을 사용합니다. 배포방식을 <code>All at once</code>에서 <code>Rolling with additional batch</code>로 변경하면, 배포할 때 새로운 EC2를 하나 더 만들고 애플리케이션을 배포한 다음 Target Group을 새로운 EC2를 바라보게 변경하고 이전 EC2를 제거하는 과정을 자동으로 해줍니다. 순간적으로 인스턴스가 2대 생기기 때문에 서비스가 중단되지 않겠죠?</p><p>그럼 도메인을 연결하고 HTTPS 보안을 적용하는 방법을 알아보겠습니다.</p>',7);var ts=s(i,[["render",function(s,o,t,r,i,ts){const cs=c("Chat-KakaoMsg"),ps=c("Chat-KakaoRoom"),rs=c("custom-image");return p(),a("div",null,[d,l(ps,null,{default:e((()=>[l(cs,{avatar:"senior",user:"촋 CTO",msg:"이번엔 서버를 프라이빗 서브넷에 구축해 볼게요",isMe:"false"}),l(cs,{msg:"퍼블릭 서브넷하고 프라이빗 서브넷 차이가 뭔가요??",isMe:"true"}),l(cs,{avatar:"senior",user:"촋 CTO",msg:"퍼블릭 서브넷은 인터넷에 노출된 영역이고 프라이빗 서브넷은 인터넷과 분리된 내부망 영역이라고 보시면 돼요",isMe:"false"}),l(cs,{msg:"근데.. 인터넷이랑 분리되어 있으면 어떻게 접근하나요??",isMe:"true"}),l(cs,{avatar:"senior",user:"촋 CTO",msg:"퍼블릭 서브넷에 로드 밸런서랑 NAT 게이트웨이를 둘 거에요. 그럼 프라이빗 네트워크에 있는 서버가 외부랑 통신할 수 있어요",isMe:"false"}),l(cs,{msg:"아! 그럼 외부에서 접근할 땐 로드 밸런서를 통해서 접근하고 내부에서 인터넷 통신이 필요할 땐 NAT 게이트웨이를 거치는 거군요??",isMe:"true"}),l(cs,{avatar:"senior",user:"촋 CTO",msg:"네네 맞아요. 직접적인 서버 접근이 불가능하기 때문에 보안 측면에서 유리해요",isMe:"false"}),l(cs,{msg:"네트워크 구성이 쪼옴 어려울 수 있는데 일단 만들면서 알아볼게요",isMe:"false"})])),_:1}),u,n("div",A,[l(rs,{src:"/imgs/aws-multi-deploy/vpc-subnet.png",alt:"Public Subnet"})]),g,n("div",C,[l(rs,{src:"/imgs/aws-multi-deploy/security-credentials.png",alt:"Security Credentials"})]),D,n("div",y,[l(rs,{src:"/imgs/aws-multi-deploy/accesskey.png",alt:"Access Key"})]),m,n("div",b,[l(rs,{src:"/imgs/aws-multi-deploy/accesskey-create.png",alt:"Access Key Created"})]),v,n("div",h,[l(rs,{src:"/imgs/aws-multi-deploy/vpc-private-subnet.png",alt:"Public Subnet"})]),_,n("div",F,[l(rs,{src:"/imgs/aws-multi-deploy/vpc-public.png",alt:"Public Subnet"})]),w,n("div",S,[l(rs,{src:"/imgs/aws-multi-deploy/vpc-private.png",alt:"Public / Private Subnet"})]),T,f,I,k,n("div",E,[l(rs,{src:"/imgs/aws-multi-deploy/ec2-private-subnet.png",alt:"EC2 - Subnet"})]),P,x,n("div",B,[l(rs,{src:"/imgs/aws-multi-deploy/ec2-private-ip.png",alt:"EC2 - Public IP"})]),L,V,n("div",N,[l(rs,{src:"/imgs/aws-multi-deploy/ec2-private-sg.png",alt:"EC2 - Security Group"})]),q,W,n("div",M,[l(rs,{src:"/imgs/aws-multi-deploy/ec2-number.png",alt:"EC2 - Number of instances"})]),K,G,R,l(ps,null,{default:e((()=>[l(cs,{msg:"지난번엔 서버 IP로 바로 요청을 보냈는데, 이젠 로드 밸런서로 요청을 해야 하나요?",isMe:"true"}),l(cs,{avatar:"senior",user:"촋 CTO",msg:"네네 로드 밸런서로 요청을 보내면 연결된 서버로 부하를 분산해 줍니다",isMe:"false"}),l(cs,{msg:"근데.. 혹시 로드 밸런서가 죽으면 어떻게 되나요??",isMe:"true"}),l(cs,{avatar:"senior",user:"촋 CTO",msg:"로드 밸런서가 죽으면 아무리 서버가 많아도 서비스가 멈추겠죠??",isMe:"false"}),l(cs,{msg:"헉??!! 그럼.. 로드 밸런서를 안 죽게 그 앞에 또 로드 밸런서를 두나요..?",isMe:"true"}),l(cs,{msg:"그리고 부하가 진짜 많으면 로드 밸런서도 죽을 수 있는 거 아닌가요?",isMe:"true"}),l(cs,{avatar:"senior",user:"촋 CTO",msg:"ㅎㅎ 맞아요. 로드 밸런서도 죽을 수 있기 때문에 대비가 필요해요",isMe:"false"}),l(cs,{msg:"그 고민을 해결해주는 서비스가 Elastic Load Balancer에요. Elastic Load Balancer는 둘 이상의 가용 영역에서 설치해서 안정성을 높이고 트래픽에 따라 자동으로 성능을 확장해줍니다",isMe:"false"})])),_:1}),z,O,H,n("div",j,[l(rs,{src:"/imgs/aws-multi-deploy/create-lb.png",alt:"ELB - Type"})]),U,n("div",Z,[l(rs,{src:"/imgs/aws-multi-deploy/elb-basic-config.png",alt:"ELB - Basic Configuration"})]),J,n("div",Q,[l(rs,{src:"/imgs/aws-multi-deploy/elb-network.png",alt:"ELB - Network Mapping"})]),X,n("div",Y,[l(rs,{src:"/imgs/aws-multi-deploy/elb-sg.png",alt:"ELB - Security Group"})]),$,n("div",ss,[l(rs,{src:"/imgs/aws-multi-deploy/target-group-port.png",alt:"Target Group - Port"})]),as,n("div",ls,[l(rs,{src:"/imgs/aws-multi-deploy/target-group-regist.png",alt:"Target Group - Regist"})]),es,n("div",ns,[l(rs,{src:"/imgs/aws-multi-deploy/elb-target.png",alt:"ELB - Target Group"})]),os])}]]);export{r as __pageData,ts as default};
