import{_ as s,c as a,a as n,d as l,w as p,e as o,b as e,r as t,o as c}from"./app.7bd26314.js";const r='{"title":"GitHub","description":"","frontmatter":{"head":[["meta",{"property":"og:description","content":"GitHub을 이용한 협업과 Mock을 이용한 테스트"}],["meta",{"property":"twitter:description","content":"GitHub을 이용한 협업과 Mock을 이용한 테스트"}]]},"headers":[{"level":2,"title":"원격 저장소","slug":"원격-저장소"},{"level":2,"title":"GitHub Flow","slug":"github-flow"},{"level":2,"title":"Mock 테스트","slug":"mock-테스트"},{"level":2,"title":"마무리","slug":"마무리"}],"relativePath":"guide/github.md"}',F={},y=o('<h1 id="github" tabindex="-1">GitHub <a class="header-anchor" href="#github" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">⚡️ 목표</p><p>✅ <a href="https://github.com/" target="_blank" rel="noopener noreferrer">GitHub</a>을 이용하여 소스를 공유합니다.<br> ✅ <a href="https://docs.github.com/en/get-started/quickstart/github-flow" target="_blank" rel="noopener noreferrer">GitHub Flow</a> 방식을 이용하여 코드를 리뷰합니다.<br> ✅ Mock을 이용하여 테스트 코드를 작성합니다.</p></div><p><div class="table-of-contents"><ul><li><a href="#원격-저장소">원격 저장소</a></li><li><a href="#github-flow">GitHub Flow</a></li><li><a href="#mock-테스트">Mock 테스트</a></li><li><a href="#마무리">마무리</a></li></ul></div></p><h2 id="원격-저장소" tabindex="-1">원격 저장소 <a class="header-anchor" href="#원격-저장소" aria-hidden="true">#</a></h2><p>Git은 단순 버전 관리 시스템을 넘어 <strong>분산</strong> 버전 관리 시스템입니다. 분산된 저장소에 소스를 관리할 수 있고 가장 유명한 서비스는 GitHub입니다.</p><p><a href="https://subicura.com/git/prepare/github-setup.html?utm_source=subicura.com&amp;utm_medium=referral&amp;utm_campaign=devops" target="_blank" rel="noopener noreferrer">GitHub에 회원가입</a>을 하고 첫 번째 저장소를 만들어 봅니다.</p><ol><li>상단 프로필 이미지 옆에 <code>+</code> 버튼을 누르고 <code>New Repository</code>를 선택합니다.</li></ol>',7),D={class:"image-200"},i=n("ol",{start:"2"},[n("li",null,"저장소 이름을 입력하고 공개 여부를 선택합니다.")],-1),A={class:"image-750"},C=n("ol",{start:"3"},[n("li",null,"🎉 짠! 첫 번째 저장소를 만들었습니다.")],-1),d={class:"image-750"},u=o('<p>화면에서 안내하는 대로 원격 저장소를 설정합니다. <code>git commit</code> 까지 완료한 상태니, 이후 명령어만 실행합니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># 메인 브랜치 이름을 main으로 설정</span></span>\n<span class="line"><span style="color:#A6ACCD;">git branch -M main</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 원격 저장소 추가</span></span>\n<span class="line"><span style="color:#A6ACCD;">git remote add origin git@github.com:subicura/awesome-api-server.git</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 원격 저장소에 푸시</span></span>\n<span class="line"><span style="color:#A6ACCD;">git push -u origin main</span></span>\n<span class="line"></span></code></pre></div><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;">Enumerating objects: 19, done.</span></span>\n<span class="line"><span style="color:#A6ACCD;">Counting objects: 100% </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">19/19</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">, done.</span></span>\n<span class="line"><span style="color:#A6ACCD;">Delta compression using up to 8 threads</span></span>\n<span class="line"><span style="color:#A6ACCD;">Compressing objects: 100% </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">16/16</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">, done.</span></span>\n<span class="line"><span style="color:#A6ACCD;">Writing objects: 100% </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">19/19</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">, 88.17 KiB </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> 7.35 MiB/s, done.</span></span>\n<span class="line"><span style="color:#A6ACCD;">Total 19 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">delta 4</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">, reused 0 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">delta 0</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">, pack-reused 0</span></span>\n<span class="line"><span style="color:#A6ACCD;">remote: Resolving deltas: 100% </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">4/4</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">, done.</span></span>\n<span class="line"><span style="color:#A6ACCD;">To github.com:subicura/awesome-api-server.git</span></span>\n<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">new branch</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">      main -</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> main</span></span>\n<span class="line"><span style="color:#A6ACCD;">Branch </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">set</span><span style="color:#A6ACCD;"> up to track remote branch </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">main</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> from </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">origin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">.</span></span>\n<span class="line"></span></code></pre></div><p>드디어! 팀원들과 소스를 공유할 수 있는 원격 저장소가 만들어졌습니다. <s>20220318_2_source.zip 안녕</s></p>',4),g=n("h2",{id:"github-flow",tabindex:"-1"},[e("GitHub Flow "),n("a",{class:"header-anchor",href:"#github-flow","aria-hidden":"true"},"#")],-1),h={class:"image-350"},v=o('<p>Git 브랜치는 하나의 저장소를 목적에 따라 다양하게 분기할 수 있는 기능입니다. 브랜치 기능을 이용하면 한 작업이 끝나고 다음 작업을 진행한 다음, 그 작업이 끝난 후 그다음 작업을 하는 것이 아니라 동시에 여러 작업을 진행하고 최종적으로 합치는 과정을 자연스럽게 할 수 있습니다.</p><p>이번에 새로 추가할 기능은 외부 API를 호출하고 그 결과를 정리해서 응답하는 API입니다. 일단 브랜치를 만들어서 분기한 다음 코드를 작성합니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># 새로운 브랜치 생성</span></span>\n<span class="line"><span style="color:#A6ACCD;">git switch -c add-activity</span></span>\n<span class="line"></span></code></pre></div><p><code>add-activity</code> 브랜치를 만들었고 여기에 작성한 코드는 <code>main</code> 브랜치에 영향을 미치지 않기 때문에 독립적으로 개발하고 나중에 합치면 됩니다.</p><p>외부 API를 호출하기 위해서 <code>node-fetch</code> 패키지를 추가합니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># node-fetch 설치</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm install node-fetch@2 --save</span></span>\n<span class="line"></span></code></pre></div><p><code>src/app.js</code> 파일에 <code>/activity</code> 내용을 추가합니다.</p><div class="language-js"><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fetch </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">node-fetch</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">...</span></span>\n<span class="line"><span style="color:#A6ACCD;">  app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">_</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> reply</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://www.boredapi.com/api/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> activity</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">activity</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reply</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">code</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">400</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> code</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">API_ERROR</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> message</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">...</span></span>\n<span class="line"></span></code></pre></div><p>심심할 때 할 일을 알려주는 <code>boredapi</code>를 호출하고 결과를 응답하는 API 입니다. 테스트해볼까요?</p><div class="language-sh"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># HTTP 요청</span></span>\n<span class="line"><span style="color:#A6ACCD;">curl http://localhost:3000/activity</span></span>\n<span class="line"></span></code></pre></div><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;">{</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Learn to play a new instrument</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">}</span></span>\n<span class="line"></span></code></pre></div><p>잘 동작하네요! 그럼 GitHub 저장소에 Push 합니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># 정적분석, 포멧팅 실행</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm run validate</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 변경된 파일 추가</span></span>\n<span class="line"><span style="color:#A6ACCD;">git add </span><span style="color:#82AAFF;">.</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 커밋</span></span>\n<span class="line"><span style="color:#A6ACCD;">git commit -m </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">add activity</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 원격 저장소에 브랜치 푸시</span></span>\n<span class="line"><span style="color:#A6ACCD;">git push origin add-activity</span></span>\n<span class="line"></span></code></pre></div><p>Push하고 GitHub에 접속하면 <code>Compare &amp; pull request</code> 버튼이 보입니다.</p><ol><li>브랜치에 작업한 내용을 검토하기 위해 <code>PR(Pull request)</code>을 생성합니다.</li></ol>',15),m={class:"image-650"},b=n("ol",{start:"2"},[n("li",null,[e("최종적으로 팀원이 코드 리뷰를 완료하면 "),n("code",null,"Merge pull request"),e(" 버튼을 누릅니다.")])],-1),f={class:"image-650"},E=o('<div class="tip custom-block"><p class="custom-block-title">GitHub Flow 더보기</p><p>📔 <a href="https://docs.github.com/en/get-started/quickstart/github-flow" target="_blank" rel="noopener noreferrer">공식 가이드</a><br> 📔 <a href="https://enterprise.github.com/downloads/en/github-flow-cheatsheet.pdf" target="_blank" rel="noopener noreferrer">GitHub Flow Cheetsheet</a></p></div><h2 id="mock-테스트" tabindex="-1">Mock 테스트 <a class="header-anchor" href="#mock-테스트" aria-hidden="true">#</a></h2><p><code>/activity</code>를 호출하면 <code>{ &quot;activity&quot;: &quot;xxx&quot; }</code>를 호출하는 테스트 코드를 작성합니다.</p><div class="language-js"><pre><code><span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;/activity&quot; 접속시 정상 응답</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">build</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">inject</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    url</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">statusCode</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">activity</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toMatchInlineSnapshot</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">...</span></span>\n<span class="line"></span></code></pre></div><p>Jest가 자동으로 테스트를 수행하고 Snapshot을 만듭니다.</p><div class="language-js"><pre><code><span class="line"><span style="color:#82AAFF;">expect</span><span style="color:#A6ACCD;">(res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">activity)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toMatchInlineSnapshot</span><span style="color:#A6ACCD;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">`</span><span style="color:#C3E88D;">&quot;Paint the first thing you see&quot;</span><span style="color:#89DDFF;">`</span></span>\n<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div>',6),q=o('<p>외부 API를 호출하는 <code>fetch</code>를 Mock으로 변경해서 테스트합니다. 기존 테스트 코드에 다음 내용을 추가합니다.</p><div class="language-js"><div class="highlight-lines"><div class="highlighted"> </div><br><br><div class="highlighted"> </div><div class="highlighted"> </div><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="line"><span style="color:#A6ACCD;">jest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mock</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node-fetch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> build </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> fetch </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node-fetch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> Response </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> jest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">requireActual</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node-fetch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">beforeEach</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">jest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clearAllMocks</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">...</span></span>\n<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;/activity&quot; 접속시 정상 응답</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">fetch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mockReturnValue</span><span style="color:#F07178;">(</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Response</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> activity</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">FAKE_ACTIVITY</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)))</span></span>\n<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">build</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">inject</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    url</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">statusCode</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">activity</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toMatchInlineSnapshot</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><p><code>fetch</code>를 호출하면 임의로 <code>{ activity: &quot;FAKE_ACTIVITY&quot; }</code>를 응답하도록 테스트 코드를 수정했습니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;"> PASS  src/__tests__/app.js</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ✓ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 요청시 </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello: world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 응답 확인 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">33 ms</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ✓ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/ping</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 요청시 </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">status: ok</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 응답 확인 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">1 ms</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ✓ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 접속시 정상 응답 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">1 ms</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Test Suites: 1 passed, 1 total</span></span>\n<span class="line"><span style="color:#A6ACCD;">Tests:       3 passed, 3 total</span></span>\n<span class="line"><span style="color:#A6ACCD;">Snapshots:   3 passed, 3 total</span></span>\n<span class="line"><span style="color:#A6ACCD;">Time:        0.132 s, estimated 1 s</span></span>\n<span class="line"><span style="color:#A6ACCD;">Ran all </span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;"> suites related to changed files.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Watch Usage: Press w to show more.</span></span>\n<span class="line"></span></code></pre></div><p>🎉 성공! 경고 없이 실행되었습니다. 여러 번 실행해도 매번 성공합니다. API 요청도 줄이고 속도도 빠르고 1석 2조?</p><p>이제, 외부 API 서버에 오류가 생겼을 때 테스트 코드를 작성합니다.</p><div class="language-js"><pre><code><span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;/activity&quot; 접속시 boredapi 오류 처리</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">fetch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mockReturnValue</span><span style="color:#F07178;">(</span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reject</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">API is down</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">build</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">inject</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    url</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">statusCode</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">400</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toEqual</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">API_ERROR</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">...</span></span>\n<span class="line"></span></code></pre></div><p>Jest가 자동으로 테스트를 수행합니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;"> PASS  src/__tests__/app.js</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ✓ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 요청시 </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello: world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 응답 확인 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">37 ms</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ✓ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/ping</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 요청시 </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">status: ok</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 응답 확인 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">2 ms</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ✓ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 접속시 정상 응답 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">1 ms</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ✓ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 접속시 boredapi 오류 처리 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">1 ms</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Test Suites: 1 passed, 1 total</span></span>\n<span class="line"><span style="color:#A6ACCD;">Tests:       4 passed, 4 total</span></span>\n<span class="line"><span style="color:#A6ACCD;">Snapshots:   3 passed, 3 total</span></span>\n<span class="line"><span style="color:#A6ACCD;">Time:        0.184 s, estimated 1 s</span></span>\n<span class="line"><span style="color:#A6ACCD;">Ran all </span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;"> suites related to changed files.</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Watch Usage: Press w to show more.</span></span>\n<span class="line"></span></code></pre></div><p>역시 성공입니다.</p><p>곰곰이 생각해보니 외부 API 응답은 정상인데 <code>activity</code>값이 비어 있는 경우도 처리를 해야 할 것 같습니다. 관련해서 테스트 코드를 추가합니다.</p><div class="language-js"><div class="highlight-lines"><br><br><div class="highlighted"> </div><br><br><br><br><br><br><br><br><br><br><br></div><pre><code><span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">&quot;/activity&quot; 접속시 activity 빈값 처리</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">fetch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mockReturnValue</span><span style="color:#F07178;">(</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Response</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> activity</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)))</span></span>\n<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">build</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">inject</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    url</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">statusCode</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">400</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">code</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toEqual</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">API_ERROR</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><p>테스트 결과는 실패입니다. 오류가 발생하길 기대했는데 정상적으로 <code>200</code>을 응답하네요.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;">  ● </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 접속시 activity 빈값 처리</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    expect</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">received</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">.toBe</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">expected</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> // Object.is equality</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">    Expected: 400</span></span>\n<span class="line"><span style="color:#A6ACCD;">    Received: 200</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">      69 </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">   })</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      70 </span><span style="color:#89DDFF;">|</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> 71 </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">   expect</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">res.statusCode</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">.toBe</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">400</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">         </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">                          ^</span></span>\n<span class="line"><span style="color:#A6ACCD;">      72 </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;">   </span><span style="color:#82AAFF;">expect(res.json</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;">.code).toEqual</span><span style="color:#89DDFF;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">API_ERROR</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">);</span></span>\n<span class="line"><span style="color:#A6ACCD;">      73 </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> })</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">      at Object.</span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;">anonymous</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">src/__tests__/app.js:71:26</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p><code>app.js</code> 코드를 수정합니다.</p><div class="language-js"><div class="highlight-lines"><br><br><br><br><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><div class="highlighted"> </div><br><br><br><br><br></div><pre><code><span class="line"><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">_</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> reply</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://www.boredapi.com/api/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">data</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">activity</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> activity</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">activity</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">};</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reply</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">code</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">400</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> code</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">API_ERROR</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> message</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Activity is required!</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">e</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">reply</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">code</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">400</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> code</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">API_ERROR</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> message</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"></span></code></pre></div><p>🎉 모두 성공입니다! <s>짜릿해, 늘 새로워, 테스트 코드가 최고야</s></p><p>이제 작성한 코드를 Push 합니다. 동일한 브랜치에 커밋을 추가하면 GitHub PR에 자동으로 변경된 사항을 반영합니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># 정적분석, 포멧팅 실행</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm run validate</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 변경된 파일 추가</span></span>\n<span class="line"><span style="color:#A6ACCD;">git add </span><span style="color:#82AAFF;">.</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 커밋</span></span>\n<span class="line"><span style="color:#A6ACCD;">git commit -m </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">add activity test code</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 원격 저장소에 브랜치 푸시</span></span>\n<span class="line"><span style="color:#A6ACCD;">git push origin add-activity</span></span>\n<span class="line"></span></code></pre></div><p>GitHub에서 <code>Merge pull request</code> 버튼을 눌러 코드를 합칩니다.</p><p>최종적으로 <code>main</code> 브랜치로 이동하고 최신 소스를 가져옵니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># 브랜치 변경</span></span>\n<span class="line"><span style="color:#A6ACCD;">git switch main</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 원격 저장소 변경사항 반영</span></span>\n<span class="line"><span style="color:#A6ACCD;">git pull</span></span>\n<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Jest 더보기</p><p>📔 <a href="https://jestjs.io/docs/mock-functions" target="_blank" rel="noopener noreferrer">Mock 함수 공식문서</a></p></div><h2 id="마무리" tabindex="-1">마무리 <a class="header-anchor" href="#마무리" aria-hidden="true">#</a></h2><p>GitHub Flow는 <code>브랜치 생성하기 &gt; 코딩 &gt; PR 만들기 &gt; 리뷰 &gt; 합치고 배포하기</code> 를 반복하는 단순한 방식이지만, 효율적으로 코드를 검토하고 협업할 수 있습니다.</p><p>정적 코드 분석과 포멧터를 이용하면 코드 스타일에 대한 리뷰를 생략할 수 있고 핵심 로직에 집중할 수 있습니다. 자동화하는 만큼 비지니스 로직을 한 줄 더 작성할 수 있는 소중한 시간이 생깁니다.</p><p>테스트와 관련해선 이번 글이 마지막입니다. 더 자세한 내용은 너무 범위가 넓어져서.. 테스트 관련해서 알아두면 좋은 건 <code>Mock</code>이 많으면 좋지 않은 테스트 코드의 징조라는 겁니다. 실제 테스트 코드를 작성할 땐, 테스트 전문 서적/글을 꼭 참고해 주세요.</p>',27);var _=s(F,[["render",function(s,o,e,r,F,_){const P=t("custom-image"),T=t("Chat-KakaoMsg"),w=t("Chat-KakaoRoom");return c(),a("div",null,[y,n("div",D,[l(P,{src:"/imgs/github/add-repository.png",alt:"Add Repository"})]),i,n("div",A,[l(P,{src:"/imgs/github/new_repository.png",alt:"New Repository"})]),C,n("div",d,[l(P,{src:"/imgs/github/empty_repository.png",alt:"Empty Repository"})]),u,l(w,null,{default:p((()=>[l(T,{msg:"GitHub 저장소 만들었습니다!",isMe:"true"}),l(T,{msg:"이제 원격으로 코드 공유하려고요 ㅎㅎ",isMe:"true"}),l(T,{avatar:"senior",user:"촋 CTO",msg:"축하드립니다! 🎉",isMe:"false"}),l(T,{msg:"GitHub 저장소도 만들었으니, 효율적으로 협업하는 방법을 알아볼까요?",isMe:"false"}),l(T,{msg:"아.. 그냥 push, pull 잘하면 되는거 아닌가요?!",isMe:"true"}),l(T,{avatar:"senior",user:"촋 CTO",msg:"Git은 강력한 브랜치기능을 제공하는데, GitHub Flow 방식으로 개발하면 코드 리뷰와 협업이 편해져요",isMe:"false"}),l(T,{msg:"브런치.. 먹는 건가요..",isMe:"true"}),l(T,{avatar:"senior",user:"촋 CTO",msg:"브런치가 아니고 브랜치(branch)..인데 일단 브랜치 생성부터 알려드릴게요 ㅎㅎㅎ",isMe:"false"})])),_:1}),g,n("div",h,[l(P,{src:"/imgs/github/git-branch.png",alt:"Git Branch"})]),v,n("div",m,[l(P,{src:"/imgs/github/add_pr.png",alt:"Add Pull Request"})]),b,n("div",f,[l(P,{src:"/imgs/github/pr.png",alt:"Pull Request"})]),l(w,null,{default:p((()=>[l(T,{avatar:"senior",user:"촋 CTO",msg:"PR 올리신거 리뷰 달았어요",isMe:"false"}),l(T,{msg:"확인해보겠습니다~~",isMe:"true"}),l(T,{avatar:"senior",user:"촋 CTO",msg:"코드는 깔끔한데, 새로 만든 API 테스트코드가 빠졌더라고요. 추가하면 좋을 것 같아요!",isMe:"false"}),l(T,{msg:"아.. 자꾸 까먹네요 ㅠㅠ 추가하겠습니다",isMe:"true"})])),_:1}),E,l(w,null,{default:p((()=>[l(T,{msg:"테스트 코드를 작성하는데 문제가 생겼습니다! ;ㅁ;",isMe:"true"}),l(T,{avatar:"senior",user:"촋 CTO",msg:"???!!!",isMe:"false"}),l(T,{msg:"외부 API를 호출하는데.. 테스트할 때마다 결과가 달라서 테스트가 자꾸 실패하네요 ㅠㅠ",isMe:"true"}),l(T,{avatar:"senior",user:"촋 CTO",msg:"아.. 외부 API를 사용하는 경우엔 Mock을 이용하면 좋아요",isMe:"false"}),l(T,{msg:"Mock이.. 뭔가요",isMe:"true"}),l(T,{avatar:"senior",user:"촋 CTO",msg:"외부 API는 우리 맘대로 제어할 수 없고 응답을 받아서 처리만 가능하죠?",isMe:"false"}),l(T,{msg:"그럼 2가지 정도를 테스트 할 수 있는데, 1) API 서버가 정상적으로 응답을 주었을 때, 2) API 서버에 오류가 있을 때 저희가 만든 API가 정상적으로 처리하는지를 보면 될 것 같네요",isMe:"false"}),l(T,{msg:"실제로 외부 API를 호출하지 않고 마치 호출한 것처럼 하는 방법을 Mock이라고 해요",isMe:"false"}),l(T,{msg:"오.. 대박사건",isMe:"true"})])),_:1}),q])}]]);export{r as __pageData,_ as default};
