import{_ as s,c as a,d as n,w as l,e as p,r as o,o as e}from"./app.7bd26314.js";const t='{"title":"Validate, 테스트 자동화","description":"","frontmatter":{"head":[["meta",{"property":"og:description","content":"Validate, 테스트 자동 체크 도입하기"}],["meta",{"property":"twitter:description","content":"Validate, 테스트 자동 체크 도입하기"}]]},"headers":[{"level":2,"title":"Husky","slug":"husky"},{"level":2,"title":"link-staged","slug":"link-staged"},{"level":2,"title":"마무리","slug":"마무리"}],"relativePath":"guide/validate.md"}',c={},r=p('<h1 id="validate-테스트-자동화" tabindex="-1">Validate, 테스트 자동화 <a class="header-anchor" href="#validate-테스트-자동화" aria-hidden="true">#</a></h1><div class="tip custom-block"><p class="custom-block-title">⚡️ 목표</p><p>✅ <a href="https://github.com/typicode/husky" target="_blank" rel="noopener noreferrer">Husky</a>를 이용하여 커밋할 때 Validate, 테스트 스크립트를 실행합니다.<br> ✅ <a href="https://github.com/okonet/lint-staged" target="_blank" rel="noopener noreferrer">lint-staged</a>를 이용하여 Husky 실행 속도를 최적화 합니다.</p></div><p><div class="table-of-contents"><ul><li><a href="#husky">Husky</a></li><li><a href="#link-staged">link-staged</a></li><li><a href="#마무리">마무리</a></li></ul></div></p><p>Git을 도입하고, GitHub도 사용하고 GitHub Flow로 협업도 하고 개발팀의 개발문화가 많이 좋아진 것 같습니다. 🔥</p>',4),i=p('<h2 id="husky" tabindex="-1">Husky <a class="header-anchor" href="#husky" aria-hidden="true">#</a></h2><p>Husky는 Git hook을 손쉽게 사용할 수 있게 도와주는 도구입니다. <s>쉬운 게 최고</s></p><p>Husky를 설치합니다. 처음 설치하는 경우 손이 좀 많이 가는데, 이후에 사용하는 개발자는 <code>npm install</code> 후 바로 사용하면 됩니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># Husky 설치</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm install husky --save-dev</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># package.json에 prepare 스크립트를 추가합니다 (설치하는 사람이 최초 한번만 실행)</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm set-script prepare </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">husky install</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># Git Hook 설정</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm run prepare</span></span>\n<span class="line"></span></code></pre></div><p>설치가 완료되면, Git Hook을 설정합니다. <code>.husky/pre-commit</code> 파일을 직접 수정하거나 스크립트를 이용합니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># commit 하기 전에 validate와 test 스크립트 실행</span></span>\n<span class="line"><span style="color:#A6ACCD;">npx husky add .husky/pre-commit </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">npm run validate &amp;&amp; npm run test</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"></span></code></pre></div><p>이제 수정사항을 커밋해볼까요?</p><div class="language-sh"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># 변경된 파일 추가</span></span>\n<span class="line"><span style="color:#A6ACCD;">git add </span><span style="color:#82AAFF;">.</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 커밋</span></span>\n<span class="line"><span style="color:#A6ACCD;">git commit -m </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">add husky</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"></span></code></pre></div><div class="language-sh"><pre><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> awesome-api-server@1.0.0 validate</span></span>\n<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> npm run lint </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> npm run format</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> awesome-api-server@1.0.0 lint</span></span>\n<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> eslint </span><span style="color:#82AAFF;">.</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> awesome-api-server@1.0.0 format</span></span>\n<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> prettier --write </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/**/*.+(js|json)</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">src/__tests__/app.js 26ms</span></span>\n<span class="line"><span style="color:#A6ACCD;">src/app.js 9ms</span></span>\n<span class="line"><span style="color:#A6ACCD;">src/server.js 4ms</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> awesome-api-server@1.0.0 </span><span style="color:#82AAFF;">test</span></span>\n<span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> jest</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;"> PASS  src/__tests__/app.js</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ✓ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 요청시 </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello: world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 응답 확인 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">62 ms</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ✓ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/ping</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 요청시 </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">status: ok</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 응답 확인 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">2 ms</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ✓ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 접속시 정상 응답 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">2 ms</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ✓ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 접속시 boredapi 오류 처리 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">4 ms</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;">  ✓ </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/activity</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> 접속시 activity 빈값 처리 </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">1 ms</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">Test Suites: 1 passed, 1 total</span></span>\n<span class="line"><span style="color:#A6ACCD;">Tests:       5 passed, 5 total</span></span>\n<span class="line"><span style="color:#A6ACCD;">Snapshots:   3 passed, 3 total</span></span>\n<span class="line"><span style="color:#A6ACCD;">Time:        0.323 s, estimated 1 s</span></span>\n<span class="line"><span style="color:#A6ACCD;">Ran all </span><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;"> suites.</span></span>\n<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">add-activity e027190</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> add husky</span></span>\n<span class="line"><span style="color:#A6ACCD;"> 3 files changed, 29 insertions</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">+</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">, 1 deletion</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">-</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"><span style="color:#A6ACCD;"> create mode 100755 .husky/pre-commit</span></span>\n<span class="line"></span></code></pre></div><p>Validate와 테스트 스크립트가 자동으로 실행되는 것을 확인할 수 있습니다. 스크립트가 실패하면 커밋도 실패하기 떄문에 이제 이전같은 실수는 더이상 없겠죠?</p>',10),D=p('<div class="tip custom-block"><p class="custom-block-title">Husky 더보기</p><p>📔 <a href="https://typicode.github.io/husky" target="_blank" rel="noopener noreferrer">Husky 공식문서</a></p></div><h2 id="link-staged" tabindex="-1">link-staged <a class="header-anchor" href="#link-staged" aria-hidden="true">#</a></h2><p>link-staged는 Git의 staged 영역에 있는 파일만 필터링해서 작업할 수 있는 도구입니다. 전체 파일 중에 commit 할 파일만 체크하기 때문에 속도를 대폭 개선할 수 있습니다.</p><p>link-staged를 설치합니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># lint-staged 설치</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm install lint-staged --save-dev</span></span>\n<span class="line"></span></code></pre></div><p><code>package.json</code>에 link-staged 스크립트를 추가합니다.</p><div class="language-json"><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlighted"> </div><br><br></div><pre><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">start</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node src/server.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">lint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint .</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">format</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prettier --write </span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#C3E88D;">src/**/*.+(js|json)</span><span style="color:#A6ACCD;">\\&quot;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">validate</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">npm run lint &amp;&amp; npm run format</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jest</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">test:watch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jest --watch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">prepare</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">husky install</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">lint-staged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">lint-staged</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// ⇠ 추가</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"></span></code></pre></div><p>어떤 파일을 어떻게 체크할지 <code>.lintstagedrc</code>파일에 설정합니다.</p><p><code>*.js</code> 파일에 대해서 Prettier, ESLint, Jest를 수행하고 Jest는 수정한 파일과 관련된 테스트를 수행하기 위해 <code>--findRelatedTests</code> 옵션을 추가합니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">*.+(js)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">: </span><span style="color:#89DDFF;">[</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">prettier --write</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">eslint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">jest --findRelatedTests</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>기존 huksy Hook 설정을 변경합니다. <code>.husky/pre-commit</code> 파일을 수정합니다.</p><div class="language-sh"><div class="highlight-lines"><br><div class="highlighted"> </div><br></div><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># npm run validate &amp;&amp; npm run test // ⇠ 삭제</span></span>\n<span class="line"><span style="color:#A6ACCD;">npm run lint-staged </span><span style="color:#676E95;font-style:italic;"># ⇠ 추가</span></span>\n<span class="line"></span></code></pre></div><p>이제 어떻게 동작하는지 커밋을 해볼까요?</p><div class="language-sh"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># 변경된 파일 추가</span></span>\n<span class="line"><span style="color:#A6ACCD;">git add </span><span style="color:#82AAFF;">.</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;"># 커밋</span></span>\n<span class="line"><span style="color:#A6ACCD;">git commit -m </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">add lint-staged</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"></span></code></pre></div><p>아무런 체크 없이 커밋이 되었습니다. 수정한 파일중에 <code>.js</code> 파일이 없어서 lint-staged에 설정한 스크립트가 실행되지 않았습니다.</p><p>일부러 <code>.js</code> 파일을 하나 수정하고 다시 커밋합니다.</p><div class="language-sh"><pre><code><span class="line"><span style="color:#A6ACCD;">✔ Preparing lint-staged...</span></span>\n<span class="line"><span style="color:#A6ACCD;">✔ Running tasks </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> staged files...</span></span>\n<span class="line"><span style="color:#A6ACCD;">✔ Applying modifications from tasks...</span></span>\n<span class="line"><span style="color:#A6ACCD;">✔ Cleaning up temporary files...</span></span>\n<span class="line"><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">add-activity a02475c</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> update js</span></span>\n<span class="line"><span style="color:#A6ACCD;"> 1 file changed, 1 insertion</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">+</span><span style="color:#89DDFF;">)</span></span>\n<span class="line"></span></code></pre></div><p>lint-staged가 수정된 파일만 골라서 체크하는 것을 확인할 수 있습니다.</p><div class="tip custom-block"><p class="custom-block-title">lint-staged 더보기</p><p>📔 <a href="https://github.com/okonet/lint-staged#configuration" target="_blank" rel="noopener noreferrer">lint-staged 설정 공식문서</a></p></div><h2 id="마무리" tabindex="-1">마무리 <a class="header-anchor" href="#마무리" aria-hidden="true">#</a></h2><p>도구를 도입하는 목적은 &quot;더 빨리, 더 안정적으로&quot; 개발하는 것임을 생각하고 개선할 수 있는 방법을 찾는 것이 중요합니다. <s>찾아보면 이미 다 있음</s></p><p>이제 개발 환경은 여기까지 설정하고 본격적으로 배포를 해봅시다.</p>',22);var y=s(c,[["render",function(s,p,t,c,y,F){const C=o("Chat-KakaoMsg"),A=o("Chat-KakaoRoom");return e(),a("div",null,[r,n(A,null,{default:l((()=>[n(C,{msg:"요즘 PR이 많이 올라오는데.. validate나 테스트를 깜빡하고 Push하는 경우가 많습니다",isMe:"true"}),n(C,{msg:"아.. 진짜 계속 까먹어요 ㅠ 이거 혹시 해결방법 없을까요?",isMe:"true"}),n(C,{avatar:"senior",user:"촋 CTO",msg:"깜빡하는 팀원에게 벌금을 걷는..건 아니고 커밋하기 전에 강제로  체크하면 되겠네요",isMe:"false"}),n(C,{msg:"오 강제로 체크할 수가 있나요?",isMe:"true"}),n(C,{avatar:"senior",user:"촋 CTO",msg:"Git은 hook을 지원하기 때문에 pre-commit hook을 이용하면 됩니다",isMe:"false"}),n(C,{msg:".git/hooks 디렉토리 봤는데.. 봐도 잘 모르겠어요 ㅠㅠ",isMe:"true"}),n(C,{avatar:"senior",user:"촋 CTO",msg:"ㅎㅎㅎ 쉘 스크립트를 몰라도 사용할 수 있어요. Husky를 도입해 보죠",isMe:"false"})])),_:1}),i,n(A,null,{default:l((()=>[n(C,{msg:"Husky 간단하고 진짜 좋네요!",isMe:"true"}),n(C,{msg:"근데.. 코드가 좀 커지니까 git commit 명령어가 너무 느려졌어요 ㅠㅠ 팀원들도 뭐라고 하고.. 빼자고..",isMe:"true"}),n(C,{avatar:"senior",user:"촋 CTO",msg:"아무래도 코드가 크면 체크하는 시간도 오래 걸리고 사용자 경험이 좋지는 않죠 ㅠㅠ",isMe:"false"}),n(C,{avatar:"senior",user:"촋 CTO",msg:"그럼 커밋할 파일들만 체크하는 건 어떨까요?",isMe:"false"}),n(C,{msg:"???? 😳",isMe:"true"}),n(C,{avatar:"senior",user:"촋 CTO",msg:"link-staged를 도입해서 개선해보죠",isMe:"false"})])),_:1}),D])}]]);export{t as __pageData,y as default};
